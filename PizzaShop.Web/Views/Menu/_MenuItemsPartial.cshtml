@* @model IEnumerable<PizzaShop.Domain.ViewModels.MenuViewModel>



<div class="col-md-9">
    <h4 class="text-primary">Items</h4>
    <div class="d-flex flex-row-reverse mb-2">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#menuItemModal">New
            Item</button>
        <button class="btn border"><img src="~/images/icons8-delete-80.png" height="24" width="24" alt=""></button>
        <input type="text" class="form-control w-25" placeholder="Search..." id="searchBox">
    </div>
    <div class="table-container" id="menuItemsContainer">
        <!-- Partial view will be loaded here -->
    </div>
</div>

<table class="table table-bordered menu_table" id="menuTable">
    <thead>
        <tr>
            <th><input class="form-check-input" type="checkbox" value="" id="selectAll"></th>
            <th>Name</th>
            <th>Item Type</th>
            <th>Rate</th>
            <th>Quantity</th>
            <th>Available</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody id="menuTableBody">
        @foreach (var item in Model)
        {
            <tr data-id="@item.Id" data-category-id="@item.Id" data-unit="@item.Unit"
                data-is-taxable="@item.DefaultTax" data-tax-percentage="@item.TaxPercentage" data-shortcode="@item.Shortcode"
                data-description="@item.Description">
                <td><input class="form-check-input row-checkbox" type="checkbox" value="" id="flexCheckChecked"></td>
                <td>@item.ItemName</td>
                <td><img src="@(item.ItemType == "Vegetarian" ? "/images/Veg.jfif" : "/images/Non veg.jpg")" width="24"
                        height="24" alt=""></td>
                <td>$@item.Rate</td>
                <td>@item.Quantity</td>
                <td>
                    <div class="container mt-0">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @(item.IsAvailable ?? false ? "checked" : "")>
                        </div>
                    </div>
                </td>
                <td>
                    <button class="btn btn-sm">
                        <img src="/images/icons8-pencil-50.png" height="24" width="24" alt="Edit">
                    </button>
                    <button class="btn btn-sm">
                        <img src="/images/icons8-delete-80.png" height="24" width="24" alt="Delete">
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table> *@


  @model PizzaShop.Domain.ViewModels.MenuViewModel

<!DOCTYPE html>
<html lang="en">

<head>
    </head>

<body>

    <div class="container mt-4" id="main-content">
        <div class="tab-content mt-3">
            <div class="tab-pane fade show active" id="items">
                </div>

            <div class="tab-pane fade" id="modifiers">
                <div class="row">
                    <div class="col-md-3">
                        <div class="list-group">
                            <a href="#" class="list-group-item active">Modifier Group <button
                                    class="btn btn-sm btn-primary border float-end" data-bs-toggle="modal"
                                    data-bs-target="#addModifierGroupModal">+</button></a>
                            @foreach (var modifierGroup in Model.ModifierGroups)
                            {
                                <div class="list-group-item d-flex align-items-center modifier-group-row"
                                    data-id="@modifierGroup.Id" onclick="fetchModifierItems(@modifierGroup.Id)">
                                    <div class="modifier-group-name"><img height="24" width="24"
                                            src="~/images/dining-menu.png" alt=""> @modifierGroup.Name</div>
                                    <div class="action-icons">
                                        <img src="~/images/icons8-pencil-50.png" class="edit-icon" title="Edit"
                                            onclick="openEditModifierModal(event, @modifierGroup.Id, '@modifierGroup.Name', '@modifierGroup.Description')">
                                        <img src="~/images/icons8-delete-80.png" class="delete-icon" title="Delete"
                                            onclick="openDeleteModifierModal(event, @modifierGroup.Id)">
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-md-9">
                        </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="editModifierGroupModal" tabindex="-1"
            aria-labelledby="editModifierGroupModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editModifierGroupModalLabel">Edit Modifier Group</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="editModifierGroupId">
                        <label>Modifier Group Name:</label>
                        <input type="text" id="editModifierGroupName" class="form-control">
                        <label>Description:</label>
                        <input type="text" id="editModifierGroupDescription" class="form-control">
                        <div class="d-flex flex-row-reverse">
                            <button class="btn text-primary mt-2" data-bs-dismiss="modal">Cancel</button>
                            <button class="btn navbar-color text-white mt-2"
                                id="updateModifierGroupBtn">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="deleteModifierGroupModal" tabindex="-1"
            aria-labelledby="deleteModifierGroupModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteModifierGroupModalLabel">Delete Confirmation</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body text-center">
                        <img class="warning-img" src="~/images/toppng.com-warning-icon-2400x2400.png" height="40"
                            width="40" alt="">
                        <p>Are you sure you want to delete this modifier group?</p>
                        <div class="modal-footer d-flex justify-content-center">
                            <button class="btn navbar-color text-white"
                                id="confirmDeleteModifierGroupBtn">Yes Delete</button>
                            <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            function openEditModifierModal(event, id, name, description) {
                event.stopPropagation();
                $('#editModifierGroupId').val(id);
                $('#editModifierGroupName').val(name);
                $('#editModifierGroupDescription').val(description);
                $('#editModifierGroupModal').modal('show');
            }

            function openDeleteModifierModal(event, id) {
                event.stopPropagation();
                $('#deleteModifierGroupId').val(id);
                $('#deleteModifierGroupModal').modal('show');
            }

        $(document).ready(function () {
                $('#updateModifierGroupBtn').click(function () {
                    var id = $('#editModifierGroupId').val();
                    var name = $('#editModifierGroupName').val();
                    var description = $('#editModifierGroupDescription').val();

                    $.ajax({
                        url: '/api/menu/editmodifiergroup', // Replace with your API endpoint
                        type: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify({ id: id, name: name, description: description }),
                        success: function (response) {
                            $('#editModifierGroupModal').modal('hide');
                            location.reload(); // Refresh the page or update the list
                        },
                        error: function (error) {
                            console.error('Error updating modifier group:', error);
                            alert('Failed to update modifier group.');
                        }
                    });
                });

                $('#confirmDeleteModifierGroupBtn').click(function () {
                    var id = $('#deleteModifierGroupId').val();

                    $.ajax({
                        url: '/api/menu/deletemodifiergroup/' + id, // Replace with your API endpoint
                        type: 'DELETE',
                        success: function (response) {
                            $('#deleteModifierGroupModal').modal('hide');
                            location.reload(); // Refresh the page or update the list
                        },
                        error: function (error) {
                            console.error('Error deleting modifier group:', error);
                            alert('Failed to delete modifier group.');
                        }
                    });
                });
            });
        </script>
    </div>
</body>

</html>



@* <div class="list-group-item d-flex align-items-center Modifier-row"
     data-id="@modifierGroup.Id" onclick="fetchModifierItems(@modifierGroup.Id)">
    <div class="modifier-group-name"><img height="24" width="24"
             src="~/images/dining-menu.png" alt=""> @modifierGroup.Name</div>
    <div class="action-icons">
        <img src="~/images/icons8-pencil-50.png" height="24" width="24" class="edit-icons"
             title="Edit"
             onclick="openEditModifierModal(event, @modifierGroup.Id, '@modifierGroup.Name', '@modifierGroup.Description')">
        <img src="~/images/icons8-delete-80.png" class="delete-icon" title="Delete"
             onclick="openDeleteModifierModal(event, @modifierGroup.Id)">
    </div>
</div> *@



@* let selectedModifiers = [];
     $(document).ready(function () {

        function updateSelectedGroups() {
            $('#selectedGroups').empty(); // Clear the list
             
            $('.dropdown-menu input[type="checkbox"]:checked').each(function () {
                var modifiergroupname = $(this).data('name');
                var modifiergroupId = $(this).val();

                $.ajax({
                    url: "/Menu/GetModifierById",
                    type: "Post",
                    data: { id: $(this).val() },
                    success: function (data) {
                    
                        let hasModifiers = data.length>0;
                        
                         var selectedGroupsList=` <div>
                                    <div class="d-flex justify-content-between"><h5>${modifiergroupname}</h5> 
                                    <i class="fas fa-trash delete-modifier-group"  data-modifiergroupId="${modifiergroupId}" style="cursor:pointer"></i> 
                                    </div>
                                    <div class=" d-flex justify-content-between">
                                    ${hasModifiers ?  `
                                            <select class="form-select min-modifier" id="Min_modifier_${modifiergroupId}" aria-label="Default select example">
                                            <option selected>Min</option>
                                             <option value="1">1</option>
                                             <option value="2">2</option>
                                             <option value="3">3</option>
                                             <option value="4">4</option>
                                             <option value="5">5</option>
                                            </select> 
                                             <select class="form-select max-modifier" id="Max_modifier_${modifiergroupId}" aria-label="Default select example">
                                            <option selected>Max</option>
                                             <option value="1">1</option>
                                             <option value="2">2</option>
                                             <option value="3">3</option>
                                             <option value="4">4</option>
                                             <option value="5">5</option>
                                            </select> ` : ''}
                                    </div>
                                    <div>
                                       <ul id="modifiersList_${modifiergroupId}" class="list-group"> ${hasModifiers ? '' :'<li class="text-muted text-center">No data available</li>'}
                                          </ul>
                                    </div>
                                </div>`

                        $('#selectedGroups').append(selectedGroupsList);
                             // Loop through JSON data and dynamically create list items
                             $.each(data, function (index, item) {
                                var listItem = `<li class=" d-flex justify-content-between">
                                                 ${item.name} <span class=" ">${item.rate}</span>
                                                  </li>`;
                             $(`#modifiersList_${modifiergroupId}`).append(listItem);
                         });

                         $(`#Min_modifier_${modifiergroupId}`).change(function(){
                            MaxOptions(modifiergroupId);
                         });
                        

                    
                         
                    },
                    error: function (error) {
                        console.log(error);
                    }
                });
                
               
            });
        }

        function MaxOptions(modifiergroupId) {
            let minValue = parseInt($(`#Min_modifier_${modifiergroupId}`).val());
            let $maxSelect = $(`#Max_modifier_${modifiergroupId}`);

           $maxSelect.empty();
           $maxSelect.append(`<option value="0">Max</option>`);

           for(let i=minValue; i<=5; i++){
            $maxSelect.append(`<option value="${i}">${i}</option>`);
           }
        }

   




    
    function attachDeleteEvent() {
        $('.delete-modifier-group').off('click').on('click', function () {
            let modifierGroupId = $(this).data('modifiergroupid');

            // Uncheck the corresponding checkbox
            $(`.dropdown-menu input[type="checkbox"][value="${modifierGroupId}"]`).prop('checked', false);

            // Remove the modifier group from the selected list
            $(`#selectedGroups li[data-modifiergroupid="${modifierGroupId}"]`).remove();

            // Update the selectedModifiers list
            selectedModifiers = selectedModifiers.filter(m => m.ModifierGroupId != modifierGroupId);

            // Update the hidden input with the selected modifiers
            $('#selectedModifiersInput').val(JSON.stringify(selectedModifiers));
            console.log("Selected Modifiers after deletion:", selectedModifiers); // Debugging
        });
    }
        function updateModifierSelection() {
        selectedModifiers = [];

        $('.dropdown-menu input[type="checkbox"]:checked').each(function () {
            let modifiergroupId = $(this).val();
            let minVal = $(`#Min_modifier_${modifiergroupId}`).val();
            let maxVal = $(`#Max_modifier_${modifiergroupId}`).val();

            selectedModifiers.push({
                modifiergroupId: modifiergroupId,
                MinValue: minVal,
                MaxValue: maxVal
            });
        });
        console.log(selectedModifiers);

         $("#selectedModifiersInput").val(JSON.stringify(selectedModifiers));
        console.log("Selected Modifiers:", selectedModifiers);
    }

        // Attach change event to checkboxes
        $('.dropdown-menu input[type="checkbox"]').on('change', updateSelectedGroups);
         $(document).on('change', '.min-modifier, .max-modifier', updateModifierSelection);


        // Initial update to display any pre-checked items
        updateSelectedGroups();
    }); *@




@* 
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                            @foreach (var group in Model.ModifierGroups)
                                            {
                                                <li class="dropdown-item">
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox"
                                                            mailto:id="category_@group.Id" value="@group.Id"
                                                            data-name="@group.Name">
                                                        <label class="form-check-label"
                                                            mailto:for="category_@group.Id"></label>
                                                    </div>
                                                </li>
                                            }
                                        </ul> *@


document.getElementById('saveMenuItemBtn').addEventListener('click', function () {
    const itemName = document.getElementById('itemName').value;
    const itemType = document.getElementById('itemType').value;
    const rate = document.getElementById('rate').value;
    const quantity = document.getElementById('quantity').value;
    const isAvailable = document.getElementById('isAvailable').checked;

    const modifierGroups =;
    const selectedModifierGroupDivs = document.querySelectorAll('#selectedModifierGroups .selected-modifier-group');

    selectedModifierGroupDivs.forEach(groupDiv => {
        const modifierGroupId = groupDiv.getAttribute('data-group-id');
        const min = groupDiv.querySelector('[name^="minModifier"]').value;
        const max = groupDiv.querySelector('[name^="maxModifier"]').value;

        modifierGroups.push({
            ModifierGroupId: parseInt(modifierGroupId),
            Min: parseInt(min),
            Max: parseInt(max)
        });
    });

    const formData = new FormData();
    formData.append('ItemName', itemName);
    formData.append('ItemType', itemType);
    formData.append('Rate', rate);
    formData.append('Quantity', quantity);
    formData.append('IsAvailable', isAvailable);

    // Append modifier groups as a JSON string
    formData.append('ModifierGroups', JSON.stringify(modifierGroups));

    fetch('/Menu/CreateMenuItem', { // Replace with your actual endpoint
        method: 'POST',
        body: formData
    })
        .then(response => response.json())
        .then(data => {
            // Handle success (e.g., show a message, clear the modal)
            console.log('Item created:', data);
            $('#menuItemModal').modal('hide');
            location.reload(); // Refresh the page or update the table
        })
        .catch(error => console.error('Error creating item:', error));
});



document.getElementById("saveNewItemBtn").addEventListener("click", async function () {
    let form = document.getElementById("addItemForm");

    // Get the form data as it is
    let formData = new FormData(form);

    // Capture modifier data
    let selectedModifiers =;
    let selectedGroupsDiv = document.getElementById('selectedModifierGroups');
    let groupDivs = selectedGroupsDiv.querySelectorAll('.selected-modifier-group');

    groupDivs.forEach(groupDiv => {
        let modifierGroupId = groupDiv.getAttribute('data-group-id');
        let minSelect = groupDiv.querySelector(`select[name="minModifier-${modifierGroupId}"]`);
        let maxSelect = groupDiv.querySelector(`select[name="maxModifier-${modifierGroupId}"]`);

        let selectedModifier = {
            ModifierGroupId: parseInt(modifierGroupId),
            MinValue: minSelect ? parseInt(minSelect.value) : 0,
            MaxValue: maxSelect ? parseInt(maxSelect.value) : 0
        };
        selectedModifiers.push(selectedModifier);
    });

    // Append the selectedModifiers array to the FormData
    formData.append("selectedModifierLists", JSON.stringify(selectedModifiers));

    let response = await fetch("/Menu/AddMenuItem", {
        method: "POST",
        body: formData
    });

    if (response.ok) {
        let newItem = await response.json();
        location.reload();

        $("#menuItemModal").modal("hide");

        // ... (rest of your modal cleanup code)
    } else {
        alert("Failed to add menu item.");
    }
});



public async Task<Menuitem> AddMenuItemAsync(MenuItemViewModel model)
{
    var menuItem = new Menuitem
    {
        CategoryId = model.CategoryId,
        ItemName = model.ItemName,
        ItemType = model.ItemType,
        Rate = model.Rate,
        Quantity = model.Quantity,
        UnitId = int.Parse(model.Unit),
        IsAvailable = model.IsAvailable,
        DefaultTax = model.DefaultTax,
        TaxPercentage = model.TaxPercentage,
        Shortcode = model.Shortcode,
        Description = model.Description,
        ImagePath = model.ImagePath,
    };

    // File upload logic (as you have it)
    if (model.Image != null)
    {
        string uploads = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/images/users");

        if (!Directory.Exists(uploads))
        {
            Directory.CreateDirectory(uploads);
        }

        string uniqueFileName = Guid.NewGuid().ToString() + "_" + model.Image.FileName;
        string filePath = Path.Combine(uploads, uniqueFileName);

        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            await model.Image.CopyToAsync(fileStream);
        }

        menuItem.ImagePath = "/images/users/" + uniqueFileName;
    }

    // Add the menu item to the database
    await _categoryRepository.AddAsync(menuItem);

    // Add the modifier mappings
    if (model.selectedModifierLists != null && model.selectedModifierLists.Any())
    {
        foreach (var modifier in model.selectedModifierLists)
        {
            await _categoryRepository.AddMenuItemModifierAsync(new MenuItemModifier
            {
                MenuItemId = menuItem.Id, // Use the ID generated after adding the menuItem
                ModifierGroupId = modifier.ModifierGroupId,
                MinValue = modifier.MinValue,
                MaxValue = modifier.MaxValue
            });
        }
    }

    return menuItem;
}





public async Task AddAsync(Menuitem menuItem)
{
    await _context.Menuitems.AddAsync(menuItem);
    await _context.SaveChangesAsync(); // Save changes here to get the generated ID
}

public async Task AddMenuItemModifierAsync(MenuItemModifier menuItemModifier)
{
    await _context.MenuItemsModifiers.AddAsync(menuItemModifier);
    await _context.SaveChangesAsync();
}


