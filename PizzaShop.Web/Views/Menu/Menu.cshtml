@* @model List<PizzaShop.Domain.DataModels.Category> *@

@model PizzaShop.Domain.ViewModels.MenuViewModel

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Menu</title>
    <link rel="stylesheet" href="~/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/style.css">
    <link rel="stylesheet" href="~/css/site.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css">
    <style>
        .action-icons {
            display: none;
            margin-left: auto;
        }

        .category-row:hover .action-icons {
            display: flex;
        }

        .Modifier-row:hover .action-icons {
            display: flex;
        }

        .hide {
            display: none;
        }

        .edit-icon,
        .delete-icon {
            cursor: pointer;
            width: 20px;
            height: 20px;
            margin-left: 10px;
        }

        .blurred {
            filter: blur(5px);
        }
    </style>
</head>

<body>

    <div class="container  mt-4" id="main-content">
        <div class="header">
            <div class="h2 blue-color"><strong>Menu</strong></div>
        </div>

        <ul class="nav p-2 nav-tabs " id="menuTabs">
            <li class="nav-item"><a class="nav-link active blue-color" data-bs-toggle="tab" href="#items"><img
                        src="~/images/add-list.png" height="24" width="24" alt=""> Items</a> </li>
            <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#modifiers"> <img
                        src="~/images/triangle_11004056.png" height="24" width="24" alt=""> Modifiers</a></li>
        </ul>
        <div class="tab-content mt-3">
            <div class="tab-pane fade show active" id="items">
                <div class="row">
                    <div class="col-md-3  ">
                        <div class="list-group " style="height: 350px; overflow:auto;">
                            <a href="#" class="list-group-item active blue-color">Category <button
                                    class="btn btn-sm btn-primary border float-end" data-bs-toggle="modal"
                                    data-bs-target="#addCategoryModal">+</button></a>
                            @foreach (var category in Model.Categories)
                            {
                                <div class="list-group-item d-flex align-items-center category-row" data-id="@category.Id"
                                    onclick="fetchMenuItems(@category.Id)">
                                    <div class="category-name"><img height="20" width="20" src="~/images/6_dotss.webp"
                                            alt=""> @category.CategoryName</div>
                                    <div class="action-icons">
                                        <img src="~/images/icons8-pencil-50.png" class="edit-icon" title="Edit" onclick="openEditModal(event, @category.Id, '@category.CategoryName',
                                    '@category.Description')">
                                        <img src="~/images/icons8-delete-80.png" class="delete-icon" title="Delete"
                                            onclick="openDeleteModal(event, @category.Id)">
                                    </div>
                                </div>
                            }


                        </div>
                    </div>
                    <div class="col-md-9">
                        <h4 class="text-primary">Items</h4>
                        <div class="d-flex flex-row-reverse mb-2 ">
                            <button type="button" class="btn btn-primary " data-bs-toggle="modal"
                                data-bs-target="#menuItemModal"> New Item</button>


                            <button class="btn border deleteAll" data-bs-toggle="modal"
                                data-bs-target="#bulkDeleteModal"><img src="~/images/icons8-delete-80.png" height="24"
                                    width="24" alt=""></button>

                            <input type="text" class="form-control w-25" placeholder="Search..." id="searchBox">

                        </div>

                        <div class="table-container">
                            <table class="table table-bordered menu_table" id="menuTable">
                                <thead>
                                    <tr>
                                        <th class="th1"><input class="form-check-input" type="checkbox" value=""
                                                id="selectAll">
                                        </th>
                                        <th>Name</th>
                                        <th>Item Type</th>
                                        <th>Rate</th>
                                        <th>Quantity</th>
                                        <th>Available</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="menuTableBody">
                                    <!-- Menu items will be displayed here -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                </div>
            </div>


            <!-- Modifiers -->
            <div class="tab-pane fade" id="modifiers">
                <div class="row">
                    <div class="col-md-3">
                        <div class="list-group">
                            <a href="#" class="list-group-item active">Modifier Group <button
                                    class="btn btn-sm btn-primary border float-end" data-bs-toggle="modal"
                                    data-bs-target="#addModifierGroupModal">+</button></a>
                            @foreach (var modifierGroup in Model.ModifierGroups)
                            {
                                <div class="list-group-item d-flex align-items-center Modifier-row"
                                    data-id="@modifierGroup.Id" onclick="fetchModifierItems(@modifierGroup.Id)">
                                    <div class="modifier-group-name"><img height="24" width="24"
                                            src="~/images/dining-menu.png" alt=""> @modifierGroup.Name</div>
                                    <div class="action-icons">
                                        <img src="~/images/icons8-pencil-50.png" height="24" width="24" class="edit-icons"
                                            title="Edit"
                                            onclick="openEditModifierModal(event, @modifierGroup.Id, '@modifierGroup.Name', '@modifierGroup.Description')">
                                        <img src="~/images/icons8-delete-80.png" height="24" width="24" class="delete-icon"
                                            title="Delete" onclick="openDeleteModifierModal(event, @modifierGroup.Id)">
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-md-9">
                        <h4 class="text-primary">Modifiers</h4>
                        <div class="d-flex flex-row-reverse mb-2">
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                                data-bs-target="#addModifierModal"> New Modifier</button>
                            <button class="btn border"><img src="~/images/icons8-delete-80.png" height="24" width="24"
                                    alt=""></button>
                            <input type="text" class="form-control w-25" placeholder="Search..." id="modifierSearchBox">
                        </div>
                        <div class="table-container">
                            <table class="table table-bordered modifier_table" id="modifierTable">
                                <thead>
                                    <tr>
                                        <th class="th1"><input type="checkbox"></th>
                                        <th>Name</th>
                                        <th>Unit</th>
                                        <th>Rate</th>
                                        <th>Quantity</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id="modifierTableBody">
                                    <!-- Modifier items will be displayed here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add Category Modal -->
        <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title  g-white" id="addCategoryModalLabel">Add Category</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <label>Category Name:</label>
                        <input type="text" id="addCategoryName" class="form-control">
                        <label>Description:</label>
                        <input type="text" id="addCategoryDescription" class="form-control">
                        <div class="d-flex flex-row-reverse">
                            <button class="btn text-primary mt-2" data-bs-dismiss="modal">Cancel</button>
                            <button class="btn btn-primary mt-2" id="addCategoryBtn">Save</button>

                        </div>
                    </div>
                </div>
            </div>
        </div>



        <!-- Add Modifier Group Modal -->
        <div class="modal fade" id="addModifierGroupModal" tabindex="-1" aria-labelledby="addModifierGroupModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addModifierGroupModalLabel">Add Modifier Group</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="addModifierGroupForm">
                            <div class="mb-3">
                                <label for="modifierGroupName" class="form-label">Modifier Group Name</label>
                                <input type="text" class="form-control" id="modifierGroupName" name="modifierGroupName"
                                    required>
                            </div>
                            <div class="mb-3">
                                <label for="modifierGroupDescription" class="form-label">Description</label>
                                <input type="text" class="form-control" id="modifierGroupDescription"
                                    name="modifierGroupDescription" required>
                            </div>
                            <button type="submit" class="btn btn-primary">Add</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Category Modal -->
        <div class="modal fade" id="editCategoryModal" tabindex="-1" aria-labelledby="editCategoryModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editCategoryModalLabel">Edit Category</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="editCategoryId">
                        <label>Category Name:</label>
                        <input type="text" id="editCategoryName" class="form-control">
                        <label>Description:</label>
                        <input type="text" id="editCategoryDescription" class="form-control">
                        <div class="d-flex flex-row-reverse">
                            <button class="btn text-primary mt-2" data-bs-dismiss="modal">Cancel</button>
                            <button class="btn navbar-color text-white mt-2" id="updateCategoryBtn">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Modifer modal -->

        <div class="modal fade" id="editModifierGroupModal" tabindex="-1" aria-labelledby="editModifierGroupModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editModifierGroupModalLabel">Edit Modifier Group</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="editModifierGroupId">
                        <label>Modifier Group Name:</label>
                        <input type="text" id="editModifierGroupName" class="form-control">
                        <label>Description:</label>
                        <input type="text" id="editModifierGroupDescription" class="form-control">
                        <div class="d-flex flex-row-reverse">
                            <button class="btn text-primary mt-2" data-bs-dismiss="modal">Cancel</button>
                            <button class="btn navbar-color text-white mt-2" id="updateModifierGroupBtn">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Delete Modifer modal -->

        <div class="modal fade" id="deleteModifierGroupModal" tabindex="-1"
            aria-labelledby="deleteModifierGroupModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteModifierGroupModalLabel">Delete Confirmation</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body text-center">
                        <img class="warning-img" src="~/images/toppng.com-warning-icon-2400x2400.png" height="40"
                            width="40" alt="">
                        <p>Are you sure you want to delete this modifier group?</p>
                        <div class="modal-footer d-flex justify-content-center">
                            <button class="btn navbar-color text-white" id="confirmDeleteModifierGroupBtn">Yes
                                Delete</button>
                            <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- #  addModifierModal-->
        <div class="modal fade" id="addModifierModal" tabindex="-1" aria-labelledby="modifierModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="modifierModalLabel">Add New Modifier</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form method="post" id="AddModifierForm">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="dropdown w-100">
                                        <button class="btn btn-light form-control text-start dropdown-toggle border"
                                            type="button" id="modifierDropdown" style="height: 57px; !important"
                                            data-bs-toggle="dropdown" aria-expanded="false">
                                            Select Modifier Group(s)
                                        </button>
                                        <ul class="dropdown-menu w-100" aria-labelledby="modifierDropdown">
                                            <li>
                                                <label class="dropdown-item">
                                                    <input type="checkbox" id="selectAll">
                                                    <strong>Select All</strong>
                                                </label>
                                            </li>
                                            <li>
                                                <hr class="dropdown-divider">
                                            </li>
                                            @foreach (var modifierGroup in Model.ModifierGroups)
                                            {
                                                <li>
                                                    <label class="dropdown-item">
                                                        <input type="checkbox" class="modifier-checkbox"
                                                            value="@modifierGroup.Id">
                                                        @modifierGroup.Name
                                                    </label>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                    <!-- Hidden input to store selected values -->
                                    <input type="hidden" id="ModifierGroupIds" name="ModifierGroupIds">
                                </div>

                                <div class="col-md-6">
                                    <div class="form-floating mb-3">
                                        <input type="text" class="form-control" id="Name1" name="Name"
                                            placeholder="Name">
                                        <label for="name">Name</label>
                                    </div>
                                </div>
                            </div>

                            <div class="row g-3">
                                <div class="col-md-4">
                                    <div class="form-floating">
                                        <input type="number" class="form-control" id="Rate1" name="Price"
                                            placeholder="Rate">
                                        <label for="rate">Rate</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-floating">
                                        <input type="number" class="form-control" id="Quantity1" name="Quantity"
                                            placeholder="Quantity" value="0">
                                        <label for="quantity">Quantity</label>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-floating">
                                        <select class="form-select" id="Unit1" name="Unittype" aria-label="Select Unit">
                                            <option selected>Select a unit</option>
                                            <option value="1">kg</option>
                                            <option value="2">count</option>
                                        </select>
                                        <label for="unit">Unit</label>
                                    </div>
                                </div>
                            </div>

                            <div class="form-floating mt-3">
                                <textarea class="form-control" id="Description1" name="Description"
                                    placeholder="Description"></textarea>
                                <label for="description">Description</label>
                            </div>

                            <div class="modal-footer">
                                <button type="submit" id="saveModifier" class="btn btn-primary">Save</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>


        <!-- Delete categories Confirmation Modal -->
        <div class="modal fade" id="deleteCategoryModal" tabindex="-1" aria-labelledby="deleteCategoryModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteItemModalLabel"> Delete Confirmation</h5>
                        <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body text-center">
                        <img class="warning-img" src="~/images/toppng.com-warning-icon-2400x2400.png" height="40"
                            width="40" alt="">
                        <p>Are you sure you want to delete this category?</p>
                        <div class="modal-footer d-flex justify-content-center">
                            <button class="btn navbar-color text-white" id="confirmDeleteBtn">Yes Delete</button>
                            <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <!-- Add New Item Modal -->
        <div class="modal fade" id="menuItemModal" tabindex="-1" aria-labelledby="menuItemModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="menuItemModalLabel">Add New Menu Item</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="addItemForm" enctype="multipart/form-data">

                            <div class="row">
                                <!-- Left Section (70%) -->
                                <div class="col-md-8">
                                    <div class="row mb-3">
                                        <div class="col-md-6 form-floating">

                                            <select class="form-select" id="categoryDropdown" name="categoryId">
                                                <!-- Options will be populated here -->
                                            </select>
                                            <label class="form-label" for="categoryDropdown">Category*</label>
                                        </div>

                                        <div class="col-md-6 ">
                                            <div class="form-floating">

                                                <input type="text" class="form-control" id="floatingInput"
                                                    name="itemName" placeholder="name">
                                                <label for="floatingInput">Name</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row mb-3">
                                        <div class="col-md-3">
                                            <label class="form-label">Item Type*</label>
                                            <select class="form-select" id="itemTypeDropdown" name="itemType">
                                                <!-- Options will be populated here -->
                                            </select>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label">Rate*</label>
                                            <input type="number" class="form-control" name="rate" value="0">
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label">Quantity*</label>
                                            <input type="number" class="form-control" name="quantity" value="0">
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label">Unit*</label>
                                            <select class="form-select" id="unitDropdown" name="unit">
                                                <!-- Options will be populated here -->
                                            </select>
                                        </div>
                                    </div>
                                    <div class="row mb-3">
                                        <div class="col-md-3">
                                            <div class="form-check form-switch mt-4">
                                                <input class="form-check-input" type="checkbox" id="available"
                                                    name="IsAvailable" value="true">
                                                <label class="form-check-label " for="available">Available</label>
                                            </div>

                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-check form-switch mt-4">
                                                <input class="form-check-input" type="checkbox" name="IsTaxable"
                                                    value="true"> Tax
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label">Tax Percentage</label>
                                            <input type="text" class="form-control" name="taxPercentage">
                                        </div>
                                        <div class="col-md-3">
                                            <label class="form-label">Short Code</label>
                                            <input type="text" class="form-control" name="shortCode">
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Description</label>
                                        <textarea class="form-control" rows="2" name="description"></textarea>
                                    </div>
                                    <div class="col mt-3">
                                        @* <input type="file" asp-for="ProfileImage" accept="image/*" id="FileInput"
                                        style="display: none;"> *@
                                        <input type="file" asp-for="Image" accept="image/*" id="FileInput"
                                            style="display: none;">
                                        <button type="button" class="w-100 btn-upload" onclick="OpenFile()">
                                            <div class="upload-icon">
                                                <img class="dashboard-icon" src="~/images/icons/cloud-arrow-up.svg"
                                                    alt="">

                                            </div>
                                            Browse files
                                        </button>
                                    </div>
                                </div>
                                <!-- Right Section (30%) -->
                                <div class="col-md-4" style="background-color: #fdf5e6;">
                                    <div class="mt-3">
                                        <label for="modifierGroupsContainer" class="form-label">Modifier Groups</label>
                                        <div id="modifierGroupsContainer">
                                        </div>
                                    </div>

                                    <div id="selectedModifierGroups">
                                        
                                    </div>
                                </div>
                        </form>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="saveNewItemBtn">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>


    <!--Edit item modal-->

    <div class="modal fade" id="editMenuItemModal" tabindex="-1" aria-labelledby="editMenuItemModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editMenuItemModalLabel">Edit Menu Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Left Section (70%) -->
                        <div class="col-md-8">
                            <form id="editItemForm" enctype="multipart/form-data">
                                <input type="hidden" id="editItemId" name="Id">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label class="form-label">Category*</label>
                                        <select class="form-select" id="editCategoryDropdown" name="CategoryId">
                                            <!-- Options will be populated here -->
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Name*</label>
                                        <input type="text" class="form-control" name="ItemName" id="editItemName"
                                            placeholder="Enter name">
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-3">
                                        <label class="form-label">Item Type*</label>
                                        <select class="form-select" id="editItemTypeDropdown" name="ItemType">
                                            <!-- Options will be populated here -->
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Rate*</label>
                                        <input type="number" class="form-control" name="Rate" id="editRate" value="0">
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Quantity*</label>
                                        <input type="number" class="form-control" name="Quantity" id="editQuantity"
                                            value="0">
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Unit*</label>
                                        <select class="form-select" id="editUnitDropdown" name="Unit">
                                            <!-- Options will be populated here -->
                                        </select>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-3">
                                        <div class="form-check form-switch mt-4">
                                            <input class="form-check-input" type="checkbox" name="IsAvailable"
                                                id="editIsAvailable">
                                            <label class="form-check-label" for="editIsAvailable">Available</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-check form-switch mt-4">
                                            <input class="form-check-input" type="checkbox" name="IsTaxable"
                                                id="editIsTaxable">
                                            <label class="form-check-label" for="editIsTaxable">Tax</label>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Tax Percentage</label>
                                        <input type="text" class="form-control" name="TaxPercentage"
                                            id="editTaxPercentage">
                                    </div>
                                    <div class="col-md-3">
                                        <label class="form-label">Short Code</label>
                                        <input type="text" class="form-control" name="ShortCode" id="editShortCode">
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" rows="2" name="Description"
                                        id="editDescription"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Upload Image</label>
                                    <div class="border p-3 text-center">
                                        <input type="file" class="form-control" name="Image">
                                        <small class="text-muted">Drag and Drop or Browse files</small>
                                    </div>
                                </div>
                            </form>
                        </div>
                        <!-- Right Section (30%) -->
                        <div class="col-md-4" style="background-color: #fdf5e6;">
                            <!-- Modifier Groups -->
                            <div class="mt-3">
                                <label for="ModifierGroups" class="form-label">Modifier Groups</label>
                                <select class="form-select" id="ModifierGroups" name="ModifierGroups">
                                    <option value="">Select Modifier Group(s)</option>
                                    <option value="Cheese">Cheese</option>
                                    <option value="Sauces">Sauces</option>
                                    <option value="Extras">Extras</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="saveEditItemBtn">Save</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Delete Item Modal -->
    <div class="modal fade" id="deleteItemModal" tabindex="-1" role="dialog" aria-labelledby="deleteItemModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteItemModalLabel"> Delete Confirmation</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <img class="warning-img" src="~/images/toppng.com-warning-icon-2400x2400.png" height="40" width="40"
                        alt="">
                    <p>Are you sure you want to delete this category?</p>

                </div>
                <div class="modal-footer  d-flex justify-content-center">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn navbar-color text-white" id="confirmDeleteItemBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Delete Confirmation Modal -->
    <div class="modal fade" id="bulkDeleteModal" tabindex="-1" aria-labelledby="bulkDeleteModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="bulkDeleteModalLabel">Delete Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <img class="warning-img" src="~/images/toppng.com-warning-icon-2400x2400.png" height="40" width="40"
                        alt="">
                    <p>Are you sure you want to delete the selected items?</p>
                    <div class="modal-footer d-flex justify-content-center">
                        <button class="btn navbar-color text-white" id="confirmBulkDeleteBtn">Yes, Delete</button>
                        <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Modifier Item Modal -->
    @* <div class="modal fade" id="addModifierModal" tabindex="-1" aria-labelledby="addModifierModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addModifierModalLabel">Add Modifier</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addModifierForm">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="modifierGroupDropDown" class="form-label">Modifier Group</label>
                                <select class="form-select" id="modifierGroupDropDown" name="modifierGroupId" required>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="modifierName" class="form-label">Modifier Name</label>
                                <input type="text" class="form-control" id="modifierName" name="modifierName" required>
                            </div>

                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="rate" class="form-label">Rate</label>
                                <input type="number" class="form-control" id="rate" name="rate" value="0" required>
                            </div>
                            <div class="col-md-4">
                                <label for="quantity" class="form-label">Quantity</label>
                                <input type="number" class="form-control" id="quantity" name="quantity" value="0"
                                    required>
                            </div>
                            <div class="col-md-4">
                                <label for="unit" class="form-label">Unit</label>
                                <select class="form-select" id="unitsDropdown" name="unit">
                                    <!-- Options will be populated here -->
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <input type="text" class="form-control" id="description" name="description">
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </form>
                </div>
            </div>
        </div>
    </div> *@


    @section Scripts {

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
        <script>
            function OpenFile() {
                const FileInput = document.getElementById("FileInput");
                FileInput.click();
            }
            document.addEventListener("DOMContentLoaded", function () {



                // Fetch dropdown data when the modal is opened
                $('#menuItemModal').on('show.bs.modal', async function () {  // with id menuItemModal select and when modal about to open than async func call happens(.on('show.bs.modal)

                    let response = await fetch('/Menu/GetDropdownData');
                    if (response.ok) {
                        let data = await response.json();
                        debugger
                        populateDropdown('categoryDropdown', data.categories, 'categoryName');
                        populateDropdown('itemTypeDropdown', data.itemTypes);
                        populateDropdown('unitDropdown', data.units, 'name');
                        @* populateModifierGroups(); *@
                                                                    } else {
                        alert("Failed to fetch dropdown data.");
                    }
                });

                $('#menuItemModal').on('hidden.bs.modal', function () {
                    document.getElementById("main-content").classList.remove("blurred");
                });

                function populateDropdown(dropdownId, items, textProperty) {
                    let dropdown = document.getElementById(dropdownId);
                    dropdown.innerHTML = '';
                    items.forEach(item => {
                        let option = document.createElement('option');
                        option.value = item.id || item;
                        option.text = textProperty ? item[textProperty] : item;
                        dropdown.appendChild(option);
                    });
                }

                // Function to fetch modifier groups and populate the modal
                function populateModifierGroups() {
                    console.log("populateModifierGroups called");
                    fetch('/Menu/GetModifierGroups')
                        .then(response => {
                            console.log("Response:", response);
                            return response.json();
                        })
                        .then(data => { // Changed 'groups' to 'data' for clarity
                            console.log("Modifier Groups:", data);
                            const container = document.getElementById('modifierGroupsContainer');
                            container.innerHTML = '';

                            // Access the array correctly
                            if (data.modifierGroups && Array.isArray(data.modifierGroups)) {
                                data.modifierGroups.forEach(group => {
                                    console.log("Processing Group:", group);
                                    const checkbox = document.createElement('input');
                                    checkbox.type = 'checkbox';
                                    checkbox.value = group.id;
                                    checkbox.id = `modifierGroup-${group.id}`;
                                    checkbox.classList.add('modifier-group-checkbox');

                                    const label = document.createElement('label');
                                    label.textContent = group.name;
                                    label.setAttribute('for', `modifierGroup-${group.id}`);

                                    const div = document.createElement('div');
                                    div.appendChild(checkbox);
                                    div.appendChild(label);
                                    container.appendChild(div);
                                });
                            } else {
                                console.error("Modifier groups not found or not an array");
                            }
                        })
                        .catch(error => console.error('Error fetching modifier groups:', error));
                }
                // Call this function when the modal is shown
                $('#menuItemModal').on('show.bs.modal', function (e) {
                    populateModifierGroups();
                });

            });

            document.addEventListener("DOMContentLoaded", function () {
                ///  add modifiers
                $('#addModifierModal').on('show.bs.modal', async function () {  // with id menuItemModal select and when modal about to open than async func call happens(.on('show.bs.modal)

                    let response = await fetch('/Menu/GetDropdownData');
                    if (response.ok) {

                        let data = await response.json();
                        debugger
                        populateDropdown('unitsDropdown', data.units, 'name');
                        populateDropdown('modifierGroupDropDown', data.modifierGroups, 'name');

                    } else {
                        alert("Failed to fetch dropdown data.");
                    }
                });

                $('#addModifierModal').on('hidden.bs.modal', function () {
                    document.getElementById("main-content").classList.remove("blurred");
                });

                function populateDropdown(dropdownId, items, textProperty) {
                    let dropdown = document.getElementById(dropdownId);
                    dropdown.innerHTML = '';
                    items.forEach(item => {
                        let option = document.createElement('option');
                        option.value = item.id || item;
                        option.text = textProperty ? item[textProperty] : item;
                        dropdown.appendChild(option);
                    });
                }
            });

            //save new item
            @* document.getElementById("saveNewItemBtn").addEventListener("click", async function () {
            let form = document.getElementById("addItemForm");
            let formData = new FormData(form);
            let response = await fetch("/Menu/AddMenuItem", {
            method: "POST",
            body: formData
            });

            if (response.ok) {
            let newItem = await response.json();
            location.reload();

            $("#menuItemModal").modal("hide");

            // Remove modal backdrop and modal-open class
            document.body.classList.remove("modal-open");
            let modalBackdrops = document.querySelectorAll(".modal-backdrop");
                    modalBackdrops.forEach(backdrop => backdrop.remove());

            // Remove any custom blur effect
            document.getElementById("main-content").classList.remove("blurred");
            } else {
                    alert("Failed to add menu item.");
            }
            });
            *@
                document.getElementById("saveNewItemBtn").addEventListener("click", async function () {
                    let form = document.getElementById("addItemForm");
                    let formData = new FormData(form);

                    // Capture modifier data
                    let selectedModifiers = new Array();
                    let selectedGroupsDiv = document.getElementById('selectedModifierGroups');
                    let groupDivs = selectedGroupsDiv.querySelectorAll('.selected-modifier-group');

                    groupDivs.forEach((groupDiv, index) => { // Add index
                        let modifierGroupId = groupDiv.getAttribute('data-group-id');
                        let minSelect = groupDiv.querySelector(`select[name="minModifier-${modifierGroupId}"]`);
                        let maxSelect = groupDiv.querySelector(`select[name="maxModifier-${modifierGroupId}"]`);

                        formData.append(`selectedModifierLists[${index}].ModifierGroupId`, modifierGroupId); // Append each property separately
                        formData.append(`selectedModifierLists[${index}].MinValue`, minSelect ? minSelect.value : 0);
                        formData.append(`selectedModifierLists[${index}].MaxValue`, maxSelect ? maxSelect.value : 0);
                    });

                    let response = await fetch("/Menu/AddMenuItem", {
                        method: "POST",
                        body: formData
                    });

                    if (response.ok) {
                        let newItem = await response.json();
                        location.reload();

                        $("#menuItemModal").modal("hide");

                        // ... (rest of your modal cleanup code)
                    } else {
                        alert("Failed to add menu item.");
                    }
                });

            // Event listener for modifier group checkboxes
            document.getElementById('modifierGroupsContainer').addEventListener('change', function (e) {

                if (e.target && e.target.classList.contains('modifier-group-checkbox')) {
                    const groupId = e.target.value;
                    const groupName = e.target.nextElementSibling.textContent;
                    const isChecked = e.target.checked;
                    const selectedGroupsDiv = document.getElementById('selectedModifierGroups');

                    if (isChecked) {
                        // Create elements to display the selected modifier group
                        const groupDiv = document.createElement('div');
                        groupDiv.classList.add('selected-modifier-group');
                        groupDiv.setAttribute('data-group-id', groupId);

                        const groupHeader = document.createElement('div'); // Header for Group Name and Delete
                        groupHeader.classList.add('group-header');

                        const nameLabel = document.createElement('label');
                        nameLabel.textContent = groupName;

                        const deleteButton = document.createElement('img');
                        deleteButton.src = '/images/icons8-delete-80.png'; // Assuming delete icon path
                        deleteButton.classList.add('delete-modifier-group');
                        deleteButton.addEventListener('click', function () {
                            // Uncheck the checkbox
                            document.getElementById(`modifierGroup-${groupId}`).checked = false;
                            // Remove the displayed group details
                            selectedGroupsDiv.removeChild(groupDiv);
                        });

                        groupHeader.appendChild(nameLabel);
                        groupHeader.appendChild(deleteButton);

                        // Min and Max dropdowns
                        const minSelect = createMinMaxDropdown('min', groupId);
                        const maxSelect = createMinMaxDropdown('max', groupId);

                        groupDiv.appendChild(groupHeader);
                        groupDiv.appendChild(minSelect);
                        groupDiv.appendChild(maxSelect);

                        // Create a container for modifiers within this group
                        const modifiersContainer = document.createElement('div');
                        modifiersContainer.classList.add('modifiers-container');
                        groupDiv.appendChild(modifiersContainer);

                        // Fetch and display modifiers for this group
                        fetchAndDisplayModifiers(groupId, modifiersContainer);

                        selectedGroupsDiv.appendChild(groupDiv);
                    } else {
                        // Remove the displayed group details
                        const groupDiv = selectedGroupsDiv.querySelector(`[data-group-id="${groupId}"]`);
                        if (groupDiv) {
                            selectedGroupsDiv.removeChild(groupDiv);
                        }
                    }
                }
            });

            // Helper function to create min/max dropdowns
            function createMinMaxDropdown(type, groupId) {
                const select = document.createElement('select');
                select.name = `${type}Modifier-${groupId}`;
                const defaultOption = document.createElement('option');
                defaultOption.value = "";
                defaultOption.textContent = `Select ${type}`;
                select.appendChild(defaultOption);
                for (let i = 1; i <= 6; i++) {
                    const option = document.createElement('option');
                    option.value = i;
                    option.textContent = i;
                    select.appendChild(option);
                }
                return select;
            }

            async function fetchAndDisplayModifiers(groupId, container) {
                try {
                    debugger
                    const response = await fetch(`/Menu/GetModifierByModifierGroup?id=${groupId}`);
                    if (!response.ok) {
                        throw new Error('Failed to fetch modifiers');
                    }
                    const modifiers = await response.json();

                    modifiers.forEach(modifier => {
                        const modifierDiv = document.createElement('div');
                        modifierDiv.classList.add('modifier-item');

                        const modifierNameLabel = document.createElement('label');
                        modifierNameLabel.textContent = modifier.modifierName;
                        modifierNameLabel.classList.add('modifier-name-label');
                        modifierDiv.appendChild(modifierNameLabel);

                        const modifierRateLabel = document.createElement('label');
                        modifierRateLabel.textContent = modifier.rate;
                        modifierDiv.appendChild(modifierRateLabel);

                        container.appendChild(modifierDiv);
                    });
                } catch (error) {
                    console.error('Error fetching and displaying modifiers:', error);
                }
            }


            document.getElementById("saveEditItemBtn").addEventListener("click", async function () {
                let form = document.getElementById("editItemForm");
                let formData = new FormData(form);



                // Converting checkbox values to boolean strings
                formData.set("IsAvailable", document.getElementById("editIsAvailable").checked ? "true" : "false");
                formData.set("IsTaxable", document.getElementById("editIsTaxable").checked ? "true" : "false");

                let response = await fetch("/Menu/UpdateMenuItem", {
                    method: "PUT",
                    body: formData
                });

                if (response.ok) {
                    alert("update menu item successfully!");

                    location.reload();
                } else {
                    alert("Failed to update menu item.");
                }


            });

            document.getElementById('menuTableBody').addEventListener('click', async function (event) {
                if (event.target.closest('img[alt="Edit"]')) {
                    let itemRow = event.target.closest('tr');
                    let item = {
                        id: itemRow.dataset.id,
                        itemName: itemRow.cells[1].innerText,
                        itemType: itemRow.cells[2].querySelector('img').src.includes('Veg.jfif') ? 'Vegetarian' : 'Non-Vegetarian',
                        rate: parseFloat(itemRow.cells[3].innerText.replace('$', '')),
                        quantity: parseInt(itemRow.cells[4].innerText),
                        isAvailable: itemRow.cells[5].querySelector('input[type="checkbox"]').checked,
                        categoryId: itemRow.dataset.categoryId,
                        unit: itemRow.dataset.unit,
                        isTaxable: itemRow.dataset.isTaxable === "true",
                        taxPercentage: itemRow.dataset.taxPercentage,
                        shortCode: itemRow.dataset.shortcode,
                        description: itemRow.dataset.description
                    };

                    // Fetch dropdown data from the server
                    let response = await fetch('/Menu/GetDropdownData');
                    if (response.ok) {
                        let data = await response.json();
                        populateDropdown('editCategoryDropdown', data.categories, 'categoryName', item.categoryId);
                        populateDropdown('editItemTypeDropdown', data.itemTypes, null, item.itemType);
                        populateDropdown('editUnitDropdown', data.units, 'name', item.unit);
                    } else {
                        alert("Failed to fetch dropdown data.");
                        return;
                    }

                    // Populate the edit modal with the item's data
                    let editForm = document.getElementById('editItemForm');
                    editForm.Id.value = item.id;
                    editForm.ItemName.value = item.itemName;
                    editForm.ItemType.value = item.itemType;
                    editForm.Rate.value = item.rate;
                    editForm.Quantity.value = item.quantity;
                    editForm.IsAvailable.checked = item.isAvailable;
                    editForm.IsTaxable.checked = item.isTaxable;
                    editForm.TaxPercentage.value = item.taxPercentage;
                    editForm.ShortCode.value = item.shortCode;
                    editForm.Description.value = item.description;

                    // Show the edit modal
                    let editModal = new bootstrap.Modal(document.getElementById('editMenuItemModal'));
                    editModal.show();
                }
            });

            function populateDropdown(dropdownId, items, textProperty, selectedValue) {
                let dropdown = document.getElementById(dropdownId);
                dropdown.innerHTML = '';
                items.forEach(item => {
                    let option = document.createElement('option');
                    option.value = item.id || item;
                    option.text = textProperty ? item[textProperty] : item;
                    if (selectedValue && option.value == selectedValue) {
                        option.selected = true;
                    }
                    dropdown.appendChild(option);
                });
            }

            // select all checkbox
            document.getElementById("selectAll").addEventListener("change", function () {
                let checkboxes = document.querySelectorAll("#menuTableBody .row-checkbox");
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
            });

            async function fetchMenuItems(categoryId) {
                console.log("Fetching menu items for category ID:", categoryId); // Debugging line
                let response = await fetch(`/Menu/GetMenuItemsByCategory?categoryId=${categoryId}`);
                if (response.ok) {
                    let menuItems = await response.json();
                    console.log("Menu items:", menuItems); // Debugging line
                    displayMenuItems(menuItems);
                } else {
                    alert("Failed to fetch menu items.");
                }
            }

            async function fetchModifierItems(id) {
                debugger
                console.log("Fetching menu items for Modifier ID:", id); // Debugging line
                let response = await fetch(`/Menu/GetModifierByModifierGroup?id=${id}`);
                debugger
                if (response.ok) {
                    let modifiers = await response.json();
                    console.log("modifiers :", modifiers); // Debugging line
                    displayModifiers(modifiers);
                } else {
                    alert("Failed to fetch menu items.");
                }
            }




            function displayMenuItems(menuItems) {
                let menuTableBody = document.getElementById("menuTableBody");
                menuTableBody.innerHTML = "";
                menuItems.forEach(item => {
                    let itemRow = document.createElement("tr");
                    itemRow.dataset.id = item.id;
                    itemRow.dataset.categoryId = item.categoryId;
                    itemRow.dataset.unit = item.unit;

                    itemRow.dataset.isTaxable = item.isTaxable;
                    itemRow.dataset.taxPercentage = item.taxPercentage;
                    itemRow.dataset.shortcode = item.shortcode;
                    itemRow.dataset.description = item.description;
                    itemRow.innerHTML = `
                                                                                                                                                                                                                                                                                                                                                                                                                <td><input class="form-check-input row-checkbox" type="checkbox" value="" id="flexCheckChecked"></td>

                                                                                                                                                                                                                                                                                                                                                                                                                <td> <img height="24" width="24" src="/images/dining-menu.png" alt="">  ${item.itemName}</td>
                                                                                                                                                                                                                                                                                                                                                                                                                <td><img src="${item.itemType === 'Vegetarian' ? '/images/Veg.jfif' : '/images/Non veg.jpg'}" width="24" height="24" alt=""></td>
                                                                                                                                                                                                                                                                                                                                                                                                                <td>$${item.rate}</td>
                                                                                                                                                                                                                                                                                                                                                                                                                <td>${item.quantity}</td>
                                                                                                                                                                                                                                                                                                                                                                                                                 <td>
                                                                                                                                                                                                                                                                                                                                                                                                                    <div class="container mt-0">
                                                                                                                                                                                                                                                                                                                                                                                                                        <div class="form-check form-switch">
                                                                                                                                                                                                                                                                                                                                                                                                                            <input class="form-check-input" type="checkbox" ${item.isAvailable ? 'checked' : ''}>
                                                                                                                                                                                                                                                                                                                                                                                                                        </div>
                                                                                                                                                                                                                                                                                                                                                                                                                    </div>
                                                                                                                                                                                                                                                                                                                                                                                                                </td>
                                                                                                                                                                                                                                                                                                                                                                                                                <td>
                                                                                                                                                                                                                                                                                                                                                                                                                    <button class="btn btn-sm">
                                                                                                                                                                                                                                                                                                                                                                                                                        <img src="/images/icons8-pencil-50.png" height="24" width="24" alt="Edit">
                                                                                                                                                                                                                                                                                                                                                                                                                    </button>
                                                                                                                                                                                                                                                                                                                                                                                                                    <button class="btn btn-sm">
                                                                                                                                                                                                                                                                                                                                                                                                                        <img src="/images/icons8-delete-80.png" height="24" width="24" alt="Delete">
                                                                                                                                                                                                                                                                                                                                                                                                                    </button>
                                                                                                                                                                                                                                                                                                                                                                                                                </td>
                                                                                                                                                                                                                                                                                                                                                                                                            `;
                    menuTableBody.appendChild(itemRow);
                });
            }


            function displayModifiers(menuItems) {
                let menuTableBody = document.getElementById("modifierTableBody");
                menuTableBody.innerHTML = "";
                menuItems.forEach(item => {
                    let itemRow = document.createElement("tr");
                    itemRow.innerHTML = `
                                                                                                                                                                                                                                                                                                                                                                                                                <td><input class="form-check-input row-checkbox" type="checkbox" value="" id="flexCheckChecked"></td>

                                                                                                                                                                                                                                                                                                                                                                                                                <td> <img height="24" width="24" src="/images/dining-menu.png" alt="">  ${item.modifierName}</td>

                                                                                                                                                                                                                                                                                                                                                                                                                <td>${item.unitId}</td>

                                                                                                                                                                                                                                                                                                                                                                                                                <td>$${item.rate}</td>
                                                                                                                                                                                                                                                                                                                                                                                                                <td>${item.quantity}</td>

                                                                                                                                                                                                                                                                                                                                                                                                                <td>
                                                                                                                                                                                                                                                                                                                                                                                                                    <button class="btn btn-sm">
                                                                                                                                                                                                                                                                                                                                                                                                                        <img src="/images/icons8-pencil-50.png" height="24" width="24" alt="Edit">
                                                                                                                                                                                                                                                                                                                                                                                                                    </button>
                                                                                                                                                                                                                                                                                                                                                                                                                    <button class="btn btn-sm">
                                                                                                                                                                                                                                                                                                                                                                                                                        <img src="/images/icons8-delete-80.png" height="24" width="24" alt="Delete">
                                                                                                                                                                                                                                                                                                                                                                                                                    </button>
                                                                                                                                                                                                                                                                                                                                                                                                                </td>
                                                                                                                                                                                                                                                                                                                                                                                                            `;
                    menuTableBody.appendChild(itemRow);
                });
            }


            function openEditModal(event, categoryId, categoryName, categoryDescription) {
                event.stopPropagation();
                document.getElementById("editCategoryId").value = categoryId;
                document.getElementById("editCategoryName").value = categoryName;
                document.getElementById("editCategoryDescription").value = categoryDescription;
                $("#editCategoryModal").modal("show");
            }


            function openEditModifierModal(event, id, name, description) {
                event.stopPropagation();
                debugger
                $('#editModifierGroupId').val(id);
                $('#editModifierGroupName').val(name);
                $('#editModifierGroupDescription').val(description);
                $('#editModifierGroupModal').modal('show');
            }

            function openDeleteModal(event, categoryId) {
                event.stopPropagation();
                document.getElementById("confirmDeleteBtn").setAttribute("data-id", categoryId);
                $("#deleteCategoryModal").modal("show");
            }


            function openDeleteModifierModal(event, id) {
                event.stopPropagation();
                $('#deleteModifierGroupModal').modal('show');
                $('#confirmDeleteModifierGroupBtn').attr('data-id', id); // Store ID on the button
            }

            document.addEventListener("DOMContentLoaded", function () {
                document.getElementById("addCategoryBtn").addEventListener("click", async function () {
                    let categoryName = document.getElementById("addCategoryName").value;
                    let categoryDescription = document.getElementById("addCategoryDescription").value;

                    let response = await fetch("/Menu/AddCategory", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ categoryName, description: categoryDescription })
                    });

                    if (response.ok) {
                        alert("Category added successfully!");
                        location.reload();
                    } else {
                        alert("Failed to add category.");
                    }
                });

                //for adding modifier group

                document.getElementById("addModifierGroupForm").addEventListener("submit", async function (event) {
                    event.preventDefault();
                    const formData = new FormData(event.target);
                    const data = {
                        name: formData.get("modifierGroupName"),
                        description: formData.get("modifierGroupDescription")
                    };

                    let response = await fetch("/Menu/AddModifierGroup", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        alert("Modifier group added successfully!");
                        location.reload();
                    } else {
                        alert("Failed to add modifier group.");
                    }
                });

                // Ensure the modifiers tab remains active after adding a modifier group
                if (window.location.hash === "#modifiers") {
                    new bootstrap.Tab(document.querySelector('a[href="#modifiers"]')).show();
                }

                document.querySelectorAll(".edit-icon").forEach(btn => {
                    btn.addEventListener("click", function (event) {
                        event.stopPropagation(); // Prevent triggering the fetchMenuItems function
                        let row = this.closest(".category-row");
                        let categoryId = row.getAttribute("data-id");
                        let categoryName = row.querySelector(".category-name").innerText.trim();

                        document.getElementById("editCategoryId").value = categoryId;
                        document.getElementById("editCategoryName").value = categoryName;

                        $("#editCategoryModal").modal("show");
                    });
                });



                document.getElementById("updateCategoryBtn").addEventListener("click", async function () {
                    let categoryId = document.getElementById("editCategoryId").value;
                    let categoryName = document.getElementById("editCategoryName").value;
                    let categoryDescription = document.getElementById("editCategoryDescription").value;

                    let response = await fetch(`/Menu/UpdateCategory/${categoryId}`, {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ id: categoryId, categoryName, description: categoryDescription })
                    });

                    if (response.ok) {
                        alert("Category updated successfully!");
                        location.reload();
                    } else {
                        alert("Failed to update category.");
                    }
                });

                document.getElementById("updateModifierGroupBtn").addEventListener("click", async function () {
                    var id = $('#editModifierGroupId').val();
                    var name = $('#editModifierGroupName').val();
                    var description = $('#editModifierGroupDescription').val();

                    debugger

                    let response = await fetch(`/Menu/UpdateModifier/${id}`, {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ id: id, name, description: description })
                    });

                    if (response.ok) {
                        alert("Category updated successfully!");
                        location.reload();
                    } else {
                        alert("Failed to update category.");
                    }

                });

                //set category id for delete
                document.querySelectorAll(".delete-icon").forEach(btn => {
                    btn.addEventListener("click", function (event) {
                        event.stopPropagation(); // Prevent triggering the fetchMenuItems function
                        let row = this.closest(".category-row");
                        let categoryId = row.getAttribute("data-id");

                        document.getElementById("confirmDeleteBtn").setAttribute("data-id", categoryId);
                        $("#deleteCategoryModal").modal("show");
                    });
                });



                //soft delete category

                document.getElementById("confirmDeleteBtn").addEventListener("click", async function () {
                    let categoryId = this.getAttribute("data-id");

                    let response = await fetch(`/Menu/SoftDeleteCategory/${categoryId}`, {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ is_deleted: true })
                    });

                    if (response.ok) {
                        alert("Category marked as deleted successfully!");
                        location.reload();
                    } else {
                        alert("Failed to mark category as deleted.");
                    }
                });

                //soft delete modifier group    

                document.getElementById("confirmDeleteModifierGroupBtn").addEventListener("click", async function () {
                    debugger
                    let id = $(this).attr("data-id"); // Retrieve ID from the button
                    //let id = this.getAttribute("data-id"); // Alternative way to get the attribute

                    let response = await fetch(`/Menu/SoftDeleteModifier/${id}`, {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            is_deleted: true
                        })
                    });

                    if (response.ok) {
                        alert("Category marked as deleted successfully!");
                        location.reload();
                    } else {
                        alert("Failed to mark category as deleted.");
                    }
                });


                // Soft delete item

                document.getElementById('menuTableBody').addEventListener('click', async function (event) {
                    if (event.target.closest('img[alt="Delete"]')) {
                        let itemRow = event.target.closest('tr');
                        let itemId = itemRow.dataset.id;

                        // Show the delete confirmation modal
                        document.getElementById('confirmDeleteItemBtn').setAttribute('data-id', itemId);
                        let deleteModal = new bootstrap.Modal(document.getElementById('deleteItemModal'));
                        deleteModal.show();
                    }
                });

                document.getElementById('confirmDeleteItemBtn').addEventListener('click', async function () {
                    let itemId = this.getAttribute('data-id');
                    let response = await fetch(`/Menu/SoftDeleteItem/${itemId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ is_deleted: true })
                    });
                    if (response.ok) {
                        alert('Item marked as deleted successfully!');
                        location.reload();
                    } else {
                        alert('Failed to mark item as deleted.');
                    }
                });

                // Bulk delete items
                document.getElementById("confirmBulkDeleteBtn").addEventListener("click", async function () {
                    let selectedItems = Array.from(document.querySelectorAll("#menuTableBody .row-checkbox:checked")).map(checkbox => checkbox.closest("tr").dataset.id);
                    if (selectedItems.length > 0) {
                        let response = await fetch("/Menu/BulkSoftDeleteItems", {
                            method: "PUT",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ itemIds: selectedItems.map(id => parseInt(id)) }) // Ensure IDs are integers
                        });
                        if (response.ok) {
                            alert("Items marked as deleted successfully!");
                            location.reload();
                        } else {
                            alert("Failed to mark items as deleted.");
                        }
                    } else {
                        alert("No items selected for deletion.");
                    }
                });

                // Search functionality
                document.getElementById("searchBox").addEventListener("input", function () {
                    let searchQuery = this.value.toLowerCase();
                    let menuItems = Array.from(document.querySelectorAll("#menuTableBody tr"));  //node list return by querySelectorAll and convert into arr
                    menuItems.forEach(item => {
                        let itemName = item.querySelector("td:nth-child(2)").innerText.toLowerCase();
                        if (itemName.includes(searchQuery)) {
                            item.style.display = "";  //element will revert to its default display behavior as defined by its CSS or HTML tag
                        } else {
                            item.style.display = "none";
                        }
                    });
                });
            });

            $(document).on("change", ".modifier-checkbox", function () {
                updateSelectedValues();
            });

            function updateSelectedValues() {
                var selectedValues = $(".modifier-checkbox:checked")
                    .map(function () {
                        return $(this).val();
                    })
                    .get();
                console.log("selectedvalue", selectedValues);

                $("#ModifierGroupIds").val(selectedValues.join(","));

                $("#modifierDropdown").text(
                    selectedValues.length > 0
                        ? selectedValues.length + " selected"
                        : "Select Modifier Group(s)"
                );

                $("#selectAll").prop(
                    "checked",
                    $(".modifier-checkbox").length === $(".modifier-checkbox:checked").length
                );
            }

            $(document).on("change", "#selectAll", function () {
                $(".modifier-checkbox").prop("checked", $(this).prop("checked"));
                updateSelectedValues();
            });

            // @* add modifires  *@
            $("#AddModifierForm").submit(function (event) {
                debugger
                event.preventDefault();

                updateSelectedValues();

                var selectedValues = $(".modifier-checkbox:checked")
                    .map(function () {
                        return parseInt($(this).val(), 10);
                    })
                    .get();

                var formData = {
                    ModifierGroupIds: selectedValues,
                    Name: $("#Name1").val(),
                    Price: parseFloat($("#Rate1").val()),
                    Unittype: $("#Unit1").val(),
                    Quantity: parseInt($("#Quantity1").val(), 10),
                    Description: $("#Description1").val(),
                };

                $.ajax({
                    type: "POST",
                    url: "/Menu/AddModifier",
                    data: JSON.stringify(formData),
                    contentType: "application/json",
                    processData: false,
                    success: function (response) {
                        console.log("Server Response:", response);
                        if (response.success) {
                            toastr.success("Modifier added Successfully");
                            $("#addModifierModal").modal("hide");
                            let currentGroupId = $(".modifiergroup-item.selected").data("id");
                            let pageSize = $("#ModifierPerPage").val();
                            let pageNumber = $(".modifierpagination-link.active").data("page");
                        } else {
                            toastr.error("Failed to add modifier");
                        }
                    },
                    error: function (xhr) {
                        0;
                        console.error(" Error Response:", xhr.responseText);
                        toastr.error("Validation failed. Check console for details.");
                    },
                });
            });

        </script>
    }
    @* <script src="~/js/site.js"></script> *@
</body>

</html>